import com.rameses.annotations.*;

class CloudPaymentMonitoringService {
	
	@ActiveDB('monitoring')
	def em;

	@DataContext('payment_partner')
	def em_paypartner;

	@Service('DateService')
	def dtSvc;


	@ProxyMethod
	public def getInitialInfo(params) {
		def paypartners = em_paypartner.select('name:{objid}').where('1=1').list();
		paypartners << [name: 'TOTAL'];
		def partners = em.getPartners();
		partners.each{  partner ->
			partner.paypartner = [:] 
			paypartners.each{ pp -> 
				partner.paypartner[pp.name.toLowerCase()] = 0;
			}
		}
		def pdate = dtSvc.parseCurrentDate();
		def period = "Month of " + getMonth(pdate.month) + ", " + pdate.year
		return [partners: partners, paypartners: paypartners, period: period]
	}

	@ProxyMethod
	public def getTxnCounts(params) {
		def pdate = dtSvc.parseCurrentDate();
		def month = pdate.month.toString().padLeft(2, '0');
		params.fromdate = dtSvc.parse('yyyy-MM-dd', pdate.year+"-"+month+"-01");
		params.todate = dtSvc.getMonthEndDate(params.fromdate) + 1;
		def paypartners = em_paypartner.select('objid').where('1=1').list();
		def txncounts = [];

		def counts = em.getTxnCounts(params);
		def groupByOrgCode = counts.groupBy{it.orgcode}
		groupByOrgCode.each{k, items -> 
			def txncount = [id: k, paypartner: [:]]
			paypartners.each{
				txncount.paypartner[it.objid.toLowerCase()] = 0;
			}
			items.each{
				txncount.paypartner[it.paypartnerid.toLowerCase()] = it.txncount
			}
			txncounts << txncount;
		}

		def info = getInitialInfo([:]);
		def partners = info.partners;
		txncounts.each{txn -> 
			def partner = partners.find{it.id == txn.id};
			if (partner) {
				partner.paypartner = txn.paypartner;
			}
		}
		calcTotals(partners);
		return partners;
	}

	void calcTotals(partners) {
		partners.each {partner ->
			def total = 0;
			partner.paypartner.each{k, v -> total += v}
			partner.paypartner.total = total;
		}
	}

	def getMonth(monthidx) {
		def months = dtSvc.getMonths();
		def month = months.find{ it.index == monthidx};
		return month.caption;
	}

} 

import com.rameses.annotations.*;

class CloudPartnerRegistrationService {

    @DataContext("gdx_partner")
    def partner;	

    @Service("CloudPartnerService")
    def partnerSvc;

    @Service 
    def self; 

    def verifyPartner( param, type ) {
        def id = param?.id.toString();
        def p = partner.find([ id: id ]).first();
        if ( !p )
            throw new Exception("register "+ type +" failed. Partner "+ id +" not found");

        if ( p.state.toString().toUpperCase() != 'ACTIVE' ) 
            throw new Exception("register "+ type +" failed. Partner "+ id +" is not active");

        return p;        
    }

    @ProxyMethod
    public def registerChannel( param ) {
        return verifyPartner( param, 'channel' ); 
    } 

    @ProxyMethod
    public def unregisterChannel( param ) {
        return "OK";
    } 


    @ProxyMethod
    public def registerQueue( param ) {
        return verifyPartner( param, 'queue' ); 
    } 

    @ProxyMethod
    public def unregisterQueue( param ) {        
        return "OK";
    } 


    @ProxyMethod
    public def updateRegistration() {
        def list = partnerSvc.getList();
        list.each{ o-> 
            def param = [ id: o.id ];
            try {
                if ( o.state.toString().toUpperCase() == 'ACTIVE' ) {
                    self.register( param);
                }
                else {
                    self.unregister( param );
                }
            }
            catch(Throwable t) {
                t.printStackTrace(); 
            }
        }
    }

    @ProxyMethod
    public def register( param ) {
        return verifyPartner( param, 'channel' ); 
    } 

    @ProxyMethod
    public def unregister( param ) {        
        return "OK";
    }     
}